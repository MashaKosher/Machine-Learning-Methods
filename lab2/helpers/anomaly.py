import pandas as pd
import matplotlib.pyplot as plt

def anomaly_find(dataFrame: pd.DataFrame):
    # –í—ã–±–µ—Ä–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    numeric_columns_to_analyze = ['Purchase', 'Occupation', 'Marital_Status', 
                   'Product_Category_1', 'Product_Category_2', 'Product_Category_3']

    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", numeric_columns_to_analyze)

    # 1. –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –í–´–Ø–í–õ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô
    # base_stats_print(dataFrame, numeric_columns_to_analyze)

    # 2. BOXPLOT –° –í–´–ë–†–û–°–ê–ú–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –°–¢–û–õ–ë–¶–ê –û–¢–î–ï–õ–¨–ù–û
    boxplot_with_throws_visualization(dataFrame, numeric_columns_to_analyze)




# def base_stats_print(dataFrame: pd.DataFrame, numeric_columns_to_analyze: list[str]):
#     print("\n" + "-" * 40)
#     print("–ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ò–°–õ–û–í–´–• –°–¢–û–õ–ë–¶–û–í")
#     print("-" * 40)

#     for col in numeric_columns_to_analyze:
#         if col in dataFrame.columns:
#             print(f"\nColumn: {col}:")
#             print(dataFrame[col].describe())



def boxplot_with_throws_visualization(dataFrame: pd.DataFrame, numeric_columns_to_analyze: list[str]):
    print("\n" + "=" * 60)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í –ü–û –í–°–ï–ú –°–¢–û–õ–ë–¶–ê–ú")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å subplots
    n_cols = min(3, len(numeric_columns_to_analyze))  # –º–∞–∫—Å–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ä—è–¥—É
    n_rows = (len(numeric_columns_to_analyze) + n_cols - 1) // n_cols
    
    _, axes = plt.subplots(n_rows, n_cols, figsize=(18, 6 * n_rows))
    axes = axes.flatten() if n_rows > 1 or n_cols > 1 else [axes]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_data = []
    
    for i, col in enumerate(numeric_columns_to_analyze):
        if i < len(axes):
            # Boxplot —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
            bp = axes[i].boxplot(dataFrame[col].dropna(), patch_artist=True, showfliers=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
            for box in bp['boxes']:
                box.set(facecolor='lightcoral', alpha=0.7)
            for median in bp['medians']:
                median.set(color='darkred', linewidth=2)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤
            Q1 = dataFrame[col].quantile(0.25)
            Q3 = dataFrame[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            
            outliers = dataFrame[(dataFrame[col] < lower_bound) | (dataFrame[col] > upper_bound)][col]
            outliers_percentage = len(outliers) / len(dataFrame) * 100
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_data.append({
                '–ö–æ–ª–æ–Ω–∫–∞': col,
                'Q1': Q1,
                '–ú–µ–¥–∏–∞–Ω–∞': dataFrame[col].median(),
                'Q3': Q3,
                'IQR': IQR,
                '–í—ã–±—Ä–æ—Å—ã': len(outliers),
                '% –í—ã–±—Ä–æ—Å–æ–≤': outliers_percentage,
                '–ì—Ä–∞–Ω–∏—Ü—ã': f'[{lower_bound:.1f}, {upper_bound:.1f}]'
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            axes[i].axhline(y=lower_bound, color='red', linestyle='--', alpha=0.7, linewidth=1)
            axes[i].axhline(y=upper_bound, color='red', linestyle='--', alpha=0.7, linewidth=1)
            
            axes[i].set_title(f'{col}\n–í—ã–±—Ä–æ—Å—ã: {len(outliers)} ({outliers_percentage:.1f}%)', 
                             fontsize=11, fontweight='bold')
            axes[i].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=9)
            axes[i].tick_params(axis='x', labelsize=8)
            axes[i].tick_params(axis='y', labelsize=8)
            axes[i].grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
            textstr = f'Q1: {Q1:.1f}\n–ú–µ–¥: {dataFrame[col].median():.1f}\nQ3: {Q3:.1f}'
            axes[i].text(0.02, 0.98, textstr, transform=axes[i].transAxes, fontsize=8,
                        verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
    
    # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ subplots
    for j in range(i + 1, len(axes)):
        axes[j].set_visible(False)
    
    plt.suptitle('–ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í –ü–û –í–°–ï–ú –ß–ò–°–õ–û–í–´–ú –°–¢–û–õ–ë–¶–ê–ú', fontsize=16, fontweight='bold')
    plt.tight_layout()
    plt.subplots_adjust(top=0.93)
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    print("\n" + "-" * 80)
    print("–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–ë–†–û–°–û–í")
    print("-" * 80)
    
    stats_df = pd.DataFrame(stats_data)
    stats_df = stats_df.sort_values('% –í—ã–±—Ä–æ—Å–æ–≤', ascending=False)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    display_df = stats_df.copy()
    display_df['Q1'] = display_df['Q1'].round(2)
    display_df['–ú–µ–¥–∏–∞–Ω–∞'] = display_df['–ú–µ–¥–∏–∞–Ω–∞'].round(2)
    display_df['Q3'] = display_df['Q3'].round(2)
    display_df['IQR'] = display_df['IQR'].round(2)
    display_df['% –í—ã–±—Ä–æ—Å–æ–≤'] = display_df['% –í—ã–±—Ä–æ—Å–æ–≤'].round(2)
    
    print(display_df.to_string(index=False))
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ
    print("\n" + "-" * 80)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–û–õ–û–ù–ö–ê–ú")
    print("-" * 80)
    
    for stats in stats_data:
        print(f"\nüìä {stats['–ö–æ–ª–æ–Ω–∫–∞']}:")
        print(f"   Q1: {stats['Q1']:.2f}, –ú–µ–¥–∏–∞–Ω–∞: {stats['–ú–µ–¥–∏–∞–Ω–∞']:.2f}, Q3: {stats['Q3']:.2f}")
        print(f"   IQR: {stats['IQR']:.2f}, –ì—Ä–∞–Ω–∏—Ü—ã: {stats['–ì—Ä–∞–Ω–∏—Ü—ã']}")
        print(f"   –í—ã–±—Ä–æ—Å–æ–≤: {stats['–í—ã–±—Ä–æ—Å—ã']} ({stats['% –í—ã–±—Ä–æ—Å–æ–≤']:.2f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—Ä–æ–¥—É –≤—ã–±—Ä–æ—Å–æ–≤
        if stats['% –í—ã–±—Ä–æ—Å–æ–≤'] > 10:
            print("     –ú–ù–û–ì–û –í–´–ë–†–û–°–û–í - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!")
        elif stats['% –í—ã–±—Ä–æ—Å–æ–≤'] > 5:
            print("     –ó–∞–º–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤")
        else:
            print("     –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤")