import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from .helpers import get_numeric_columns

def remove_outliers(dataFrame: pd.DataFrame, method: str = 'capping'):
    """
    –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Parameters:
    -----------
    dataFrame : pd.DataFrame
        –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    method : str, optional (default='capping')
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤:
        - 'capping': –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É IQR (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        - 'winsorize': –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è–º–∏
        - 'remove': –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
        - 'log': –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    show_plots : bool, optional (default=True)
        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–æ/–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    print("=" * 70)
    print("üîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –í–´–ë–†–û–°–û–í")
    print("=" * 70)
    
    df = dataFrame.copy()
    original_shape = df.shape
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {original_shape}")
    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
    
    numeric_columns = [col for col in get_numeric_columns(df) if col in df.columns]
    
    print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {numeric_columns}")
    
    # 2. –ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í –î–û –û–ë–†–ê–ë–û–¢–ö–ò
    print("\n" + "–ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í –î–û –û–ë–†–ê–ë–û–¢–ö–ò")
    print("-" * 40)
    
    outliers_info = {}
    
    for col in numeric_columns:
        if df[col].dtype in ['int64', 'float64']:
            # –ú–µ—Ç–æ–¥ IQR –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            
            outliers_mask = (df[col] < lower_bound) | (df[col] > upper_bound)
            outliers_count = outliers_mask.sum()
            
            if outliers_count > 0:
                outliers_info[col] = {
                    'before': outliers_count,
                    'percentage': outliers_count / len(df) * 100,
                    'lower_bound': lower_bound,
                    'upper_bound': upper_bound,
                    'min_value': df[col].min(),
                    'max_value': df[col].max(),
                    'min_outlier': df[col][outliers_mask].min(),
                    'max_outlier': df[col][outliers_mask].max()
                }
                
                print(f"üìà {col}: {outliers_count} –≤—ã–±—Ä–æ—Å–æ–≤ ({outliers_count/len(df)*100:.1f}%)")
                print(f"   –ì—Ä–∞–Ω–∏—Ü—ã IQR: [{lower_bound:.2f}, {upper_bound:.2f}]")
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: [{df[col].min():.2f}, {df[col].max():.2f}]")
    
    if not outliers_info:
        print("‚úÖ –í—ã–±—Ä–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return df
    
    
    # 4. –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í–´–ë–†–ê–ù–ù–û–ì–û –ú–ï–¢–û–î–ê
    print(f"\nüîÑ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ï–¢–û–î–ê: {method.upper()}")
    print("-" * 40)
    
    df_cleaned = df.copy()
    removal_results = {}
    
    for col, info in outliers_info.items():
        if method == 'capping':
            # Capping - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ IQR
            before_low = (df[col] < info['lower_bound']).sum()
            before_high = (df[col] > info['upper_bound']).sum()
            
            df_cleaned[col] = np.where(df[col] < info['lower_bound'], info['lower_bound'], df[col])
            df_cleaned[col] = np.where(df[col] > info['upper_bound'], info['upper_bound'], df[col])
            
            removed_count = before_low + before_high
            removal_results[col] = {
                'method': 'capping',
                'removed': removed_count,
                'new_range': [df_cleaned[col].min(), df_cleaned[col].max()]
            }
            
            print(f"‚úÖ {col}: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ {removed_count} –≤—ã–±—Ä–æ—Å–æ–≤")
            print(f"   –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: [{df_cleaned[col].min():.2f}, {df_cleaned[col].max():.2f}]")
            
        elif method == 'winsorize':
            # Winsorization - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è–º–∏
            lower_percentile = df[col].quantile(0.01)
            upper_percentile = df[col].quantile(0.99)
            
            before_low = (df[col] < lower_percentile).sum()
            before_high = (df[col] > upper_percentile).sum()
            
            df_cleaned[col] = np.where(df[col] < lower_percentile, lower_percentile, df[col])
            df_cleaned[col] = np.where(df[col] > upper_percentile, upper_percentile, df[col])
            
            removed_count = before_low + before_high
            removal_results[col] = {
                'method': 'winsorize',
                'removed': removed_count,
                'new_range': [df_cleaned[col].min(), df_cleaned[col].max()],
                'percentiles': [lower_percentile, upper_percentile]
            }
            
            print(f"‚úÖ {col}: winsorized {removed_count} –≤—ã–±—Ä–æ—Å–æ–≤")
            print(f"   –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ [1%, 99%]: [{lower_percentile:.2f}, {upper_percentile:.2f}]")
            
        elif method == 'remove':
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
            outliers_mask = (df[col] < info['lower_bound']) | (df[col] > info['upper_bound'])
            df_cleaned = df_cleaned[~outliers_mask]
            
            removed_count = outliers_mask.sum()
            removal_results[col] = {
                'method': 'remove',
                'removed': removed_count,
                'remaining_rows': len(df_cleaned)
            }
            
            print(f"‚úÖ {col}: —É–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df_cleaned)}")
            
        elif method == 'log':
            # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            if df[col].min() > 0:
                df_cleaned[col] = np.log1p(df[col])  # log(1 + x) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è log(0)
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                Q1_new = df_cleaned[col].quantile(0.25)
                Q3_new = df_cleaned[col].quantile(0.75)
                IQR_new = Q3_new - Q1_new
                outliers_new = ((df_cleaned[col] < Q1_new - 1.5 * IQR_new) | 
                               (df_cleaned[col] > Q3_new + 1.5 * IQR_new)).sum()
                
                removal_results[col] = {
                    'method': 'log',
                    'original_outliers': info['before'],
                    'new_outliers': outliers_new,
                    'transformed': True
                }
                
                print(f"‚úÖ {col}: –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
                print(f"   –í—ã–±—Ä–æ—Å–æ–≤ –¥–æ: {info['before']}, –ø–æ—Å–ª–µ: {outliers_new}")
            else:
                print(f"‚ö†Ô∏è  {col}: –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å log –∫ –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                removal_results[col] = {'method': 'skip', 'reason': '–ù–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'}

    return df_cleaned

